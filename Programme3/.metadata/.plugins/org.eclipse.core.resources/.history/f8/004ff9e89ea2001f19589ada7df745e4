package Monstre;


import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import entity.Entity;
import Main.GamePanel;

public class monster extends Entity {
    GamePanel gp;

    // La barre de vie du monstre
    int maxHealth = 100;
    int currentHealth = maxHealth;

    // Images pour le monstre
    BufferedImage slimeImage;

    public monster(GamePanel gp) {
        this.gp = gp;
        solidArea = new Rectangle(8, 16, 32, 32); // Définir la zone solide du monstre

        // Initialiser les images
        getMonsterImage();
    }

    public void getMonsterImage() {
        try {
            slimeImage = ImageIO.read(getClass().getResourceAsStream("/monstre/slime.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void update() {
        // Exemple de logique pour réduire la vie du monstre
        if (currentHealth > 0) {
            // Logique pour réduire la vie du monstre quand il entre en collision avec le joueur
            // (C'est à toi de définir la collision dans ton code de détection de collision)
            if (gp.player.solidArea.intersects(this.solidArea)) {
                currentHealth -= 50; // Réduire de 50 chaque fois que le monstre touche le joueur
                if (currentHealth < 0) {
                    currentHealth = 0; // S'assurer que la vie ne devienne pas négative
                }
            }
        }
    }

    public void draw(Graphics2D g2) {
        // Affichage du monstre
        g2.drawImage(slimeImage, worldX, worldY, gp.titleSize, gp.titleSize, null);

        // Affichage de la barre de vie
        drawHealthBar(g2);
    }

    private void drawHealthBar(Graphics2D g2) {
        int barX = worldX;
        int barY = worldY - 10; // Position de la barre de vie
        int barWidth = 32;
        int barHeight = 5;

        // Dessiner le fond de la barre de vie
        g2.setColor(Color.BLACK);
        g2.fillRect(barX, barY, barWidth, barHeight);

        // Dessiner la barre de vie
        int healthBarWidth = (int) ((double) currentHealth / maxHealth * barWidth); // Proportion de la vie
        g2.setColor(Color.RED);
        g2.fillRect(barX, barY, healthBarWidth, barHeight);
    }
}
