package tile;

import java.awt.Graphics2D;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.imageio.ImageIO;

import Main.GamePanel;
import java.io.BufferedReader;

public class TileManager {
	GamePanel gp;
	public Tile [] tile;
	public int mapTileNum[][];
	
	
	public TileManager(GamePanel gp) {
	    this.gp = gp;
	    tile = new Tile[10];
	    getTileImage(); 
	    mapTileNum= new int [gp.maxWorldCol][gp.maxWorldRow];
	    getTileImage();
	    loadMap("/MAP/world01.txt");
	}

	public void getTileImage() {
	    try {
	        tile[0] = new Tile();
	        tile[0].image = ImageIO.read(getClass().getResourceAsStream("/tiles/herbs.png"));
	        
	        //if (tile[0].image == null) System.out.println("Erreur : image herbs.png non chargée.");
	        
	        tile[1] = new Tile();
	        tile[1].image = ImageIO.read(getClass().getResourceAsStream("/tiles/mur.png"));
	        //if (tile[1].image == null) { System.out.println("Erreur : image mur.png non chargée.");}
	        tile[1].collision = true;
	        
	        
	        tile[2] = new Tile();
	        tile[2].image = ImageIO.read(getClass().getResourceAsStream("/tiles/lac.png"));
	        //if (tile[2].image == null) {System.out.println("Erreur : image lac.png non chargée.");}
	        tile[2].collision = true;
	        
	        
	        tile[3] = new Tile();
	        tile[3].image = ImageIO.read(getClass().getResourceAsStream("/tiles/sol.png"));
	        //if (tile[3].image == null) {System.out.println("Erreur : image sol.png non chargée.");}
	        tile[3].collision = true;
	        
	        
	        tile[4] = new Tile();
	        tile[4].image = ImageIO.read(getClass().getResourceAsStream("/tiles/tree.png"));
	        //if (tile[4].image == null) {System.out.println("Erreur : image arbre.png non chargée.");}
	        tile[4].collision = true;
	        
	        tile[5] = new Tile();
	        tile[5].image = ImageIO.read(getClass().getResourceAsStream("/tiles/sable.png"));
	        //if (tile[5].image == null) System.out.println("Erreur : image sable.png non chargée.");
	        tile[5].collision = true;
	        
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	}

	public void loadMap(String filePath) {
		try {
			InputStream is = getClass().getResourceAsStream("/MAPS/world01.txt");
			BufferedReader br = new BufferedReader(new InputStreamReader(is));
			int col =0;
			int row =0;
			while(col<gp.maxWorldCol && row<gp.maxWorldRow) {
				String line = br.readLine();
				while(col<gp.maxWorldCol) {
					String numbers[]=line.split(" ");
					int num = Integer.parseInt(numbers[col]);
					mapTileNum[col][row] = num;
					col++;
					
				}
				if(col==gp.maxWorldCol) {
					col =0;
					row++;
				}
			}
			br.close();
			
			
		
		
		
		
		
		
		
	}catch(Exception e) {
		
	}
		}
	public void draw(Graphics2D g2) {
	    if (tile[0] != null && tile[0].image != null) {
	    	int WorldCol = 0;
	    	int WorldRow = 0;
	    	
	    	
	    	while(WorldCol<gp.maxWorldCol && WorldRow<gp.maxWorldRow) {
	    		int titleNum = mapTileNum[WorldCol][WorldRow];
	    		
	    		int worldX= WorldCol*gp.titleSize;
	    		int worldY= WorldRow*gp.titleSize;
	    		int screenX = worldX - gp.player.worldX + gp.player.screenX;
	    		int screenY = worldY - gp.player.worldY + gp.player.screenY;
	    		if(worldX + gp.titleSize > gp.player.worldX - gp.player.screenX &&
	    		   worldX - gp.titleSize < gp.player.worldX + gp.player.screenX &&
	    		   worldY + gp.titleSize > gp.player.worldY - gp.player.screenY &&
	    		   worldY - gp.titleSize < gp.player.worldY + gp.player.screenY) {
	    			g2.drawImage(tile[titleNum].image, screenX, screenY, gp.titleSize, gp.titleSize, null);
	    			
	    		}
	    		WorldCol++;
	    		
	    		if(WorldCol== gp.maxWorldCol) {
	    			WorldCol=0;
	    			
	    			WorldRow++;
	    			
	    		}
	    	}
	    	
	    	
	    	
	    	
	    	

	    	
	    	
	        
	        

	    }
	}

	

}
